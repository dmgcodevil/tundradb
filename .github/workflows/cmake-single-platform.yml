# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        # Prevent interactive prompts
        export DEBIAN_FRONTEND=noninteractive
        
        # Install basic build tools and dependencies
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          pkg-config \
          python3 \
          python3-pip \
          wget \
          curl \
          lsb-release \
          gnupg \
          ca-certificates \
          cmake \
          uuid-dev \
          libboost-all-dev \
          libtbb-dev \
          libgtest-dev \
          libbenchmark-dev \
          libcds-dev

        # Install GCC 13 (supports C++23)
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-13 g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13 --slave /usr/bin/g++ g++ /usr/bin/g++-13

        # Add Arrow repository and install Arrow
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        wget https://apache.jfrog.io/artifactory/arrow/ubuntu/apache-arrow-apt-source-latest-$(lsb_release -cs).deb
        sudo apt-get update
        sudo apt-get install -y ./apache-arrow-apt-source-latest-$(lsb_release -cs).deb
        sudo apt-get update
        sudo apt-get install -y libarrow-dev libarrow-dataset-dev libparquet-dev
        rm ./apache-arrow-apt-source-latest-$(lsb_release -cs).deb

        # Install nlohmann-json
        mkdir -p /tmp/json
        cd /tmp/json
        wget https://github.com/nlohmann/json/releases/download/v3.11.2/json.hpp
        sudo mkdir -p /usr/include/nlohmann
        sudo cp json.hpp /usr/include/nlohmann/
        cd /
        rm -rf /tmp/json

        # Install latest CMake
        wget https://github.com/Kitware/CMake/releases/download/v3.30.0/cmake-3.30.0-linux-x86_64.sh -q -O /tmp/cmake-install.sh
        chmod u+x /tmp/cmake-install.sh
        sudo mkdir -p /opt/cmake
        sudo /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake
        # Remove existing links before creating new ones
        sudo rm -f /usr/local/bin/ccmake /usr/local/bin/cmake /usr/local/bin/cmake-gui /usr/local/bin/cpack /usr/local/bin/ctest
        sudo ln -s /opt/cmake/bin/* /usr/local/bin/
        rm /tmp/cmake-install.sh

        # Install Java for ANTLR
        sudo apt-get install -y openjdk-11-jdk

        # Install ANTLR4 runtime from source
        cd /tmp
        git clone https://github.com/antlr/antlr4.git
        cd antlr4/runtime/Cpp
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd /
        rm -rf /tmp/antlr4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_STANDARD=23 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Print Test Log
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        echo "=== Test Log Contents ==="
        cat /home/runner/work/tundradb/tundradb/build/Testing/Temporary/LastTest.log
        echo "=== End of Test Log ==="

